@inProceedings{10.1145/3314221.3314625,
author = {Krishnaswami, Neelakantan R. and Yallop, Jeremy},
title = {A Typed, Algebraic Approach to Parsing},
year = {2019},
isbn = {9781450367127},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/3314221.3314625},
abstract = {In this paper, we recall the definition of the context-free expressions (or µ-regular expressions), an algebraic presentation of the context-free languages. Then, we define a core type system for the context-free expressions which gives a compositional criterion for identifying those context-free expressions which can be parsed unambiguously by predictive algorithms in the style of recursive descent or LL(1). Next, we show how these typed grammar expressions can be used to derive a parser combinator library which both guarantees linear-time parsing with no backtracking and single-token lookahead, and which respects the natural denotational semantics of context-free expressions. Finally, we show how to exploit the type information to write a staged version of this library, which produces dramatic increases in performance, even outperforming code generated by the standard parser generator tool ocamlyacc.},
booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {379–393},
numpages = {15},
keywords = {Kleene algebra, parsing, context-free languages, type theory},
location = {Phoenix, AZ, USA},
series = {PLDI 2019}
}

@article{10.1145/2714064.2660241,
author = {Jonnalagedda, Manohar and Coppey, Thierry and Stucki, Sandro and Rompf, Tiark and Odersky, Martin},
title = {Staged Parser Combinators for Efficient Data Processing},
year = {2014},
issue_date = {October 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {10},
issn = {0362-1340},
doi = {10.1145/2714064.2660241},
abstract = {Parsers are ubiquitous in computing, and many applications depend on their performance for decoding data efficiently. Parser combinators are an intuitive tool for writing parsers: tight integration with the host language enables grammar specifications to be interleaved with processing of parse results. Unfortunately, parser combinators are typically slow due to the high overhead of the host language abstraction mechanisms that enable composition.We present a technique for eliminating such overhead. We use staging, a form of runtime code generation, to dissociate input parsing from parser composition, and eliminate intermediate data structures and computations associated with parser composition at staging time. A key challenge is to maintain support for input dependent grammars, which have no clear stage distinction.Our approach applies to top-down recursive-descent parsers as well as bottom-up non-deterministic parsers with key applications in dynamic programming on sequences, where we auto-generate code for parallel hardware. We achieve performance comparable to specialized, hand-written parsers.},
journal = {SIGPLAN Not.},
month = oct,
pages = {637–653},
numpages = {17},
keywords = {parser combinators, algebraic dynamic programming, multi-stage programming}
}

@InProceedings{10.1007/BFb0023771,
author={Leiß, Haas},
editor={Börger, Egon
and Jäger, Gerhard
and Kleine Büning, Hans
and Richter, Michael M.},
title={Towards Kleene Algebra with Recursion},
booktitle={Computer Science Logic},
year={1992},
publisher={Springer Berlin Heidelberg},
address={Berlin, Heidelberg},
pages={242--256},
doi = {10.1007/BFb0023771},
abstract={We extend Kozen's theory KA of Kleene Algebra to axiomatize parts of the equational theory of context-free languages, using a least fixed-point operator μ instead of Kleene's iteration operator *.},
isbn={978-3-540-47285-8}
}
